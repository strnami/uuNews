/**
 * @fileoverview Checks for correct import statements order
 * @author Milan Martinek
 */
"use strict";

//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------

const PROGRAM = "Program";

const LIBRARY = 1;
const UU5_LIBRARY = 2;
const LOCAL_FILE = 3;
const FILE_EXTENSION = 4;
const NOPE = 5;

let reportedNodes = new Set([]);

const UU5_LIB = /g[0-9]{2}/; // contains generation string

module.exports = {
  meta: {
    type: "problem",
    fixable: null,
    docs: {
      description: "Checks for correct import statements order",
      category: "Fill me in",
      recommended: false,
      url:
        "https://uuos9.plus4u.net/uu-bookkitg01-main/78462435-0238a88bac124b3ca828835b57144ffa/book/page?code=c089f34c"
    },
    messages: {
      invalidImportOrder: "Invalid import order {{importText}}"
    }
  },

  create: function(context) {
    // variables should be defined here

    //----------------------------------------------------------------------
    // Helpers
    //----------------------------------------------------------------------

    function isFileExtension(importSource, filename) {
      // check less and -lsi.js ext
      let lessFile = importSource.indexOf(".less") > 0;
      let lsiFile = importSource.indexOf("-lsi") > 0;
      return isLocalFile && (lessFile || lsiFile);
    }

    function isLocalFile(importSource, filename) {
      // starts with "."
      return importSource.indexOf(".") === 0;
    }

    function isUu5Library(importSource, filename) {
      // a bit hard to guess, lets assume it contains generation
      return !!importSource.match(UU5_LIB);
    }

    function isReactLibrary(importSource, filename) {
      // not a local file, should be library
      return !isLocalFile(importSource, filename);
    }

    function getImportType(node) {
      let importSource = node.source.value;
      if (isUu5Library(importSource)) {
        return UU5_LIBRARY;
      }
      if (isReactLibrary(importSource)) {
        return LIBRARY;
      }
      if (isFileExtension(importSource)) {
        return FILE_EXTENSION;
      }
      if (isLocalFile(importSource)) {
        return LOCAL_FILE;
      }

      return NOPE;
    }

    function isTopLevel(type) {
      return type === PROGRAM;
    }

    function getNodeId(node) {
      return `${node.start}-${node.end}`;
    }

    //----------------------------------------------------------------------
    // Public
    //----------------------------------------------------------------------

    return {
      ImportDeclaration(node) {
        if (!isTopLevel(context.getScope().block.type)) return;
        let importType = getImportType(node);

        let sourceCode = context.getSourceCode();

        let previousImports = sourceCode.getTokensBefore(node);
        if (!previousImports) return;

        let importNodes = previousImports
          .map(token => sourceCode.getNodeByRangeIndex(token.start))
          .filter(importNode => importNode.type === "ImportDeclaration" && isTopLevel(importNode.parent.type));

        if (importNodes.length === 0) return;

        importNodes.forEach(importNode => {
          let importNodeType = getImportType(importNode);
          let nodeId = getNodeId(importNode);
          if (importNodeType > importType && !reportedNodes.has(nodeId)) {
            context.report({
              messageId: "invalidImportOrder",
              loc: importNode.loc,
              data: { importText: sourceCode.getText(node) }
            });
            reportedNodes.add(nodeId);
          }
        });
      }
    };
  }
};
