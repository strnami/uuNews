"use strict";

const {ClientConfigurator} = require("uu_appg01_core-appserver");
const {Config} = require("uu_appg01_core-utils");
const {ClientCredentialsProvider} = require("uu_appg01_oidc").Internal;

const PRIMARY_PROVIDER_CFG = "uu_app_oidc_primary_provider";
const BASE_CONFIG_PREFIX = "uu_app_oidc_providers_";
const DEFAULT_SERVICE_NAME = "oidcg01";
const OIDCG01_SERVICE_BASE_URI = "https://oidc.plus4u.net/uu-oidcg01-main";
const OIDCG01_TENANT = "99923616732452117-4f06dafc03cb4c7f8c155aa53f0e86be";

class FrontendConfigurator {

  async onStartup() {
    ClientConfigurator.registerConfigurationProvider(this);
  }

  async getClientConfiguration() {
    let result = {
      uu_app_oidc_backend_available: true
    };
    // Propagate all OIDC configuration.
    let configObject = Config.toJSON();
    for (let key of Object.keys(configObject)) {
      if ((key.startsWith(BASE_CONFIG_PREFIX) || key === PRIMARY_PROVIDER_CFG) && !key.endsWith("_client_credentials")) {
        result[key] = configObject[key];
      }
    }
    // Propagate also "legacy" configuration to integrate with older frontend library
    let serverUri = Config.getString(`${BASE_CONFIG_PREFIX}${DEFAULT_SERVICE_NAME}_uri`, false);
    if (!serverUri) {
      serverUri = Config.getString("uu_oidc_server_uri", false);
      if (!serverUri) {
        let tenant = Config.getString("uu_oidc_server_tenant_id", false);
        serverUri = `${OIDCG01_SERVICE_BASE_URI}/${tenant ? tenant : OIDCG01_TENANT}`;
      }
    }
    result["uuoidc.serverUri"] = serverUri;
    result["uuoidc.clientId"] = (await ClientCredentialsProvider.getClientCredentials(DEFAULT_SERVICE_NAME)).client_id;
    // TODO Cannot be used, because we need to append path to baseUri, not rootUri or "public" uri.
    // result["uuoidc.redirectUri"] = "oidc/callback";
    return result;
  }

}

module.exports = FrontendConfigurator;
