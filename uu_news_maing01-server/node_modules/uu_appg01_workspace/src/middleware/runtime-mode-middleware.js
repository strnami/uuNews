"use strict";

const { Config } = require("uu_appg01_core-utils");
const { UriBuilder } = require("uu_appg01_core-uri");
const { RouteRegister, UseCaseContext } = require("uu_appg01_core-appserver");
const { DaoFactory } = require("uu_appg01_datastore");

const RuntimeModeService = require("../models/sys-app-runtime-mode-model");
const AwidRuntimeModeService = require("../models/sys-app-workspace-model");
const RuntimeModeError = require("../errors/sys-app-runtime-mode-errors");
const ProfileConfig = require("../helpers/profile-config");

const MIDDLEWARE_ORDER = 30;

const PRIVILEGED_RUNTIME_MODE = "privileged";
const ERROR_UVE_POSTFIX = "ErrorUve";

class RuntimeModeMiddleware {
  constructor() {
    this.name = "Runtime Mode Handler";
    this.order = MIDDLEWARE_ORDER;
    this.isDataStoreOn = DaoFactory.isDataStoreOn();
    this.asid = Config.get("asid");
  }

  async pre(req, res, next) {
    const uri = res.locals.uri;
    if (uri.getAwid() == this.asid) {
      return next(); // privileged command -> continue
    }

    if (!this.isDataStoreOn) {
      return next(); //running without persistence
    }

    let invalidWorkspaceRuntimeMode = false;
    let awidRuntimeMode;
    let runtimeMode = await RuntimeModeService.getAppRuntimeMode(this.asid);
    if (runtimeMode.mode !== PRIVILEGED_RUNTIME_MODE) {
      try {
        awidRuntimeMode = await AwidRuntimeModeService.getAwidRuntimeMode(uri.getAwid());
      } catch (e) {
        awidRuntimeMode = null;
      }
      let isAwidPrivilegedUseCase = ProfileConfig.getUseCaseAwidProfiles(uri.getUseCase()).length > 0;
      let isStandardUseCase = ProfileConfig.getUseCaseProfiles(uri.getUseCase()).length > 0;

      if (!isAwidPrivilegedUseCase && !isStandardUseCase) {
        return next();
      }

      if (awidRuntimeMode && awidRuntimeMode.mode === PRIVILEGED_RUNTIME_MODE) {
        if (isAwidPrivilegedUseCase) {
          return next(); //awid runtime mode in privileged mode and awid privileged uc
        } else if (isStandardUseCase) {
          invalidWorkspaceRuntimeMode = true;
        }
      } else if (awidRuntimeMode && awidRuntimeMode.mode !== PRIVILEGED_RUNTIME_MODE) {
        if (isStandardUseCase) {
          return next(); //standard runtime mode and standard uc
        } else if (isAwidPrivilegedUseCase) {
          invalidWorkspaceRuntimeMode = true;
        }
      } else if (awidRuntimeMode == null) {
        return next();
      }
    }

    // UVE -> redirect to error page if defined
    let reqMethod = req.method.toUpperCase();
    if (RouteRegister.isUve(uri.getUseCase(), uri.getProduct(), reqMethod)) {
      let errorUc = runtimeMode.mode.toLowerCase() + ERROR_UVE_POSTFIX;
      if (RouteRegister.get(errorUc, uri.getProduct(), reqMethod)) {
        // custom error page
        this._redirectToCustomErrorPage(req, res, errorUc);
      }
      return next();
    }

    // CMD -> throw error
    if (invalidWorkspaceRuntimeMode) {
      let paramMap = {
        runtimeMode: awidRuntimeMode.mode,
        note: awidRuntimeMode.note,
        from: awidRuntimeMode.from,
        to: awidRuntimeMode.to
      };
      return next(new RuntimeModeError.ucNotAvailableAwidRuntimeMode(null, paramMap));
    } else {
      let paramMap = {
        runtimeMode: runtimeMode.mode,
        note: runtimeMode.note,
        from: runtimeMode.from,
        to: runtimeMode.to
      };
      return next(new RuntimeModeError.UcNotAvailableError(null, paramMap));
    }
  }

  _redirectToCustomErrorPage(req, res, errorUc) {
    let newUri = UriBuilder.parse(res.locals.uri)
      .setUseCase(errorUc)
      .toUri();
    res.locals.uri = newUri;
    UseCaseContext.setUri(newUri);
    req.url = newUri.getRelativeUri().toString();
    res.status(503);
  }
}

module.exports = RuntimeModeMiddleware;
