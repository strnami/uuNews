const WorkspaceError = require("./workspace-error.js");

const SysDump = {
  UC_CODE: `${WorkspaceError.ERROR_PREFIX}sysDump/`,

  InvalidDtoInError: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "DtoIn is not valid.";
      this.code = `${SysDump.UC_CODE}invalidDtoIn`;
    }
  },
  MaximumSizeExceeded: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Dump size exceeds the maximum allowed size.";
      this.code = `${SysDump.UC_CODE}maximumSizeExceeded`;
    }
  },
  AppNotInPrivilegedMode: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "The application is not in the privileged runtime mode that is required for this uuCmd.";
      this.code = `${SysDump.UC_CODE}appNotInPrivilegedMode`;
    }
  },
  MaximumSizeExceededNoStats: class extends WorkspaceError {
    //update binary data
    constructor() {
      super(...arguments);
      this.message =
        "Estimated dump size exceeds the maximum allowed size. Estimated dump size may be inaccurate" +
        " because it was not obtained based on the uuAppDataStore statistics as it has not yet been calculated." +
        " Please run uuCmd sys/calculateDataStoreStats and try to run dump again.";
      this.code = `${SysDump.UC_CODE}maximumSizeExceededNoStats`;
    }
  }
};

const SysRestore = {
  UC_CODE: `${WorkspaceError.ERROR_PREFIX}sysRestore/`,

  InvalidDtoInError: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "DtoIn is not valid.";
      this.code = `${SysRestore.UC_CODE}invalidDtoIn`;
    }
  },
  MetadataNotFound: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "File _metadata.json not found in input data.";
      this.code = `${SysRestore.UC_CODE}metadataNotFound`;
    }
  },
  InvalidMetadata: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Metadata is not valid.";
      this.code = `${SysRestore.UC_CODE}invalidMetadata`;
    }
  },
  InvalidSchemaMetadata: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Metadata is not valid.";
      this.code = `${SysRestore.UC_CODE}invalidSchemaMetadata`;
    }
  },
  DaoNotFound: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Dao not found for schema from input data.";
      this.code = `${SysRestore.UC_CODE}daoNotFound`;
    }
  },
  InvalidDump: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Dump is not valid. See the cause for more details.";
      this.code = `${SysRestore.UC_CODE}invalidDump`;
    }
  },
  AppNotInPrivilegedMode: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "The application is not in the privileged runtime mode that is required for this uuCmd.";
      this.code = `${SysRestore.UC_CODE}appNotInPrivilegedMode`;
    }
  },
  artifactConnectedToRestoredAwid: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Awid can not be restored because it already exists and uuBT artifact is connected to it.";
      this.code = `${SysRestore.UC_CODE}artifactConnectedToRestoredAwid`;
    }
  },
  AwidNotFoundInDump: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Dump does not contain requested AWID.";
      this.code = `${SysRestore.UC_CODE}awidNotFoundInDump`;
    }
  },
  RestoreFailed: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Restore by DAO failed. See the cause for more details.";
      this.code = `${SysRestore.UC_CODE}restoreFailed`;
    }
  },
  AsidNotFoundInDump: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Dump does not contain ASID of your application.";
      this.code = `${SysRestore.UC_CODE}asidNotFoundInDump`;
    }
  },
  InvalidDumpRow: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Dump row is not valid. See the cause for more details.";
      this.code = `${SysRestore.UC_CODE}invalidDumpRow`;
    }
  }
};

const SysAwidDump = {
  UC_CODE: `${WorkspaceError.ERROR_PREFIX}sysAwidDump/`,

  AwidNotInPrivilegedMode: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "The AWID is not in the privileged runtime mode that is required for this uuCmd.";
      this.code = `${SysAwidDump.UC_CODE}awidNotInPrivilegedMode`;
    }
  }
};

const SysAwidRestore = {
  UC_CODE: `${WorkspaceError.ERROR_PREFIX}sysAwidRestore/`,

  AwidNotInPrivilegedMode: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "The AWID is not in the privileged runtime mode that is required for this uuCmd.";
      this.code = `${SysAwidRestore.UC_CODE}awidNotInPrivilegedMode`;
    }
  },
  InvalidDtoInError: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "DtoIn is not valid.";
      this.code = `${SysAwidRestore.UC_CODE}invalidDtoIn`;
    }
  },
  InvalidDumpRow: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Dump row is not valid. See the cause for more details.";
      this.code = `${SysAwidRestore.UC_CODE}invalidDumpRow`;
    }
  }
};

const SysImport = {
  UC_CODE: `${WorkspaceError.ERROR_PREFIX}sysImport/`,
  SysAppWorkspaceDoesNotExist: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Object sysAppWorkspace does not exist.";
      this.code = `${SysImport.UC_CODE}sysAppWorkspaceDoesNotExist`;
    }
  },
  AwidNotInPrivilegedMode: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "The AWID is not in the privileged runtime mode that is required for this uuCmd.";
      this.code = `${SysImport.UC_CODE}awidNotInPrivilegedMode`;
    }
  },
  InvalidDtoIn: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "DtoIn is not valid.";
      this.code = `${SysImport.UC_CODE}invalidDtoIn`;
    }
  },
  InvalidSchemaMetadata: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Metadata is not valid.";
      this.code = `${SysImport.UC_CODE}invalidSchemaMetadata`;
    }
  },
  DaoNotFound: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Dao not found for schema from input data.";
      this.code = `${SysImport.UC_CODE}daoNotFound`;
    }
  },
  InvalidDump: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Dump is not valid.";
      this.code = `${SysImport.UC_CODE}invalidDump`;
    }
  },
  ImportFailed: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Import failed. See the cause for more details.";
      this.code = `${SysImport.UC_CODE}importFailed`;
    }
  },
  SysImportMappingDaoCreateFailed: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Creating record by SysImportMapping DAO create failed.";
      this.code = `${SysImport.UC_CODE}sysImportMappingDaoCreateFailed`;
    }
  }
};

const SysListImportMappings = {
  UC_CODE: `${WorkspaceError.ERROR_PREFIX}sysListImportMappings/`,
  InvalidDtoIn: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "DtoIn is not valid.";
      this.code = `${SysListImportMappings.UC_CODE}invalidDtoIn`;
    }
  }
};


module.exports = {
  SysDump,
  SysRestore,
  SysAwidDump,
  SysAwidRestore,
  SysImport,
  SysListImportMappings
};
