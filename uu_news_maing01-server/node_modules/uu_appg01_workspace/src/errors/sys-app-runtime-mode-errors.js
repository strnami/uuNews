const WorkspaceError = require("./workspace-error.js");

const SysSetAppRuntimeMode = {
  UC_CODE: `${WorkspaceError.ERROR_PREFIX}sysSetAppRuntimeMode/`,

  InvalidDtoInError: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "DtoIn is not valid.";
      this.code = `${SysSetAppRuntimeMode.UC_CODE}invalidDtoIn`;
    }
  },
  SysAppConfigDaoUpdateFailedError: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Update runtime mode by sysAppConfig DAO update failed.";
      this.code = `${SysSetAppRuntimeMode.UC_CODE}sysAppConfigDaoUpdateFailed`;
    }
  },
  AppNotInitialized: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message =
        "Runtime mode cannot be set because the application is not initialized yet. To initialize your application, run uuCmd sys/initApp.";
      this.code = `${SysSetAppRuntimeMode.UC_CODE}appNotInitialized`;
    }
  }
};

class UcNotAvailableError extends WorkspaceError {
  constructor(msg, paramMap) {
    super({}, paramMap);
    this.message = msg || "This UC can not be run in the current runtime mode of the application.";
    this.code = `${WorkspaceError.ERROR_PREFIX}runtimeMode/ucNotAvailable`;
    this.status = 503;

    if (this.paramMap && this.paramMap.to) {
      if (typeof this.paramMap.to === "string") {
        this.headers["Retry-After"] = new Date(this.paramMap.to).toISOString();
      } else {
        this.headers["Retry-After"] = this.paramMap.to.toISOString();
      }
    }
  }
}

class ucNotAvailableAwidRuntimeMode extends WorkspaceError {
  constructor(msg, paramMap) {
    super({}, paramMap);
    this.message = msg || "This UC can not be run in the current runtime mode of the uuAppWorkspace.";
    this.code = `${WorkspaceError.ERROR_PREFIX}runtimeMode/ucNotAvailableAwidRuntimeMode`;
    this.status = 503;

    if (this.paramMap && this.paramMap.to) {
      if (typeof this.paramMap.to === "string") {
        this.headers["Retry-After"] = new Date(this.paramMap.to).toISOString();
      } else {
        this.headers["Retry-After"] = this.paramMap.to.toISOString();
      }
    }
  }
}

module.exports = {
  UcNotAvailableError,
  ucNotAvailableAwidRuntimeMode,
  SysSetAppRuntimeMode
};
