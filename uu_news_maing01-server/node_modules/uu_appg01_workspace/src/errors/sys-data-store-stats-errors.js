const WorkspaceError = require("./workspace-error.js");

const GetDataStoreStats = {
  UC_CODE: `${WorkspaceError.ERROR_PREFIX}sysGetDataStoreStats/`,

  InvalidDtoInError: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "DtoIn is not valid.";
      this.code = `${GetDataStoreStats.UC_CODE}invalidDtoIn`;
    }
  },

  StatsDoNotExist: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Data stores statistics for this workspace have not been calculated yet.";
      this.code = `${GetDataStoreStats.UC_CODE}statsDoNotExist`;
    }
  }
};

const ListDataStoreStats = {
  UC_CODE: `${WorkspaceError.ERROR_PREFIX}sysListDataStoreStats/`,

  InvalidDtoInError: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "DtoIn is not valid.";
      this.code = `${ListDataStoreStats.UC_CODE}invalidDtoIn`;
    }
  }
};

const CalculateDataStoreStats = {
  UC_CODE: `${WorkspaceError.ERROR_PREFIX}sysCalculateDataStoreStats/`,

  InvalidDtoInError: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "DtoIn is not valid.";
      this.code = `${CalculateDataStoreStats.UC_CODE}invalidDtoIn`;
    }
  },
  CalculationAlreadyInProgress: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "SysDataStoreStats calculation already in progress.";
      this.code = `${CalculateDataStoreStats.UC_CODE}calculationAlreadyInProgress`;
    }
  },
  CalculatedRecently: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "SysDataStoreStats calculation was recently recalculated.";
      this.code = `${CalculateDataStoreStats.UC_CODE}calculatedRecently`;
    }
  },
  PreviousCalculationFailed: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "SysDataStoreStats previous calculation has not finished.";
      this.code = `${CalculateDataStoreStats.UC_CODE}previousCalculationFailed`;
    }
  },
  UpdateByDaoFailed: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "Update SysDataStoreStats by DAO failed.";
      this.code = `${CalculateDataStoreStats.UC_CODE}updateByDaoFailed`;
    }
  },
  UnlockByDaoFailed: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "SysDataStoreStats unlock failed.";
      this.code = `${CalculateDataStoreStats.UC_CODE}unlockByDaoFailed`;
    }
  },

  //TODO logable data store error in Ruby imp ?

  UnknownDataStoreType: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "SysDataStoreStats unknown type and/or realization of data store.";
      this.code = `${CalculateDataStoreStats.UC_CODE}unknownDataStoreType`;
    }
  },
  CannotConnect: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "SysDataStoreStats cannot _connect to data store.";
      this.code = `${CalculateDataStoreStats.UC_CODE}cannotConnect`;
    }
  },
  CurrentCalculationFailed: class extends WorkspaceError {
    constructor() {
      super(...arguments);
      this.message = "SysDataStoreStats current calculation failed.";
      this.code = `${CalculateDataStoreStats.UC_CODE}currentCalculationFailed`;
    }
  }
};

module.exports = {
  GetDataStoreStats,
  ListDataStoreStats,
  CalculateDataStoreStats
};
