const { DaoFactory } = require("uu_appg01_objectstore");
const { LoggerFactory } = require("uu_appg01_core-logging");
const DataStoreStatsModel = require("../models/sys-data-store-stats-model.js");

class Migration_1_1_DataStoreStats {
  constructor() {
    this.logger = LoggerFactory.get("UuApp.AppWorkspace.MigrationDataStoreStats");
  }

  async onStartup() {
    if (DaoFactory.isDataStoreOn()) {
      this.logger.debug("Migration started.");
      try {
        await this._migrate();
      } catch (e) {
        this.logger.error("Migration finished with error: ", e);
      }
    }
  }

  async _migrate() {
    // create schema if it does not exists
    const dataStoreDao = DaoFactory.getDao("sysDataStoreStats");
    let indexes;
    try {
      indexes = (await dataStoreDao.getIndexes()).itemList;
    } catch (e) {
      if (e.cause && e.cause.codeName === "NamespaceNotFound") {
        // collection does not exist
        indexes = [];
      } else {
        throw e;
      }
    }

    if (!indexes.find(i => i.name === "awid_1")) {
      this.logger.debug(`creating schema`);
      await dataStoreDao.createSchema();
    }

    // Create stats objects for AWIDs if they do not exist
    const workspaceDao = DaoFactory.getDao("sysAppWorkspace");
    let workspaces = await workspaceDao.find({});
    let promises = [];
    for (let item of workspaces.itemList) {
      let stats = await dataStoreDao.getByAwid(item.awid);
      if (!stats) {
        this.logger.debug(`creating empty object for AWID ${item.awid}`);
        let result = DataStoreStatsModel.create(item.awid);
        promises.push(result);
      }
    }

    await Promise.all(promises);

    this.logger.debug("Migration finished without errors.");
  }
}

module.exports = Migration_1_1_DataStoreStats;
