const { DaoFactory } = require("uu_appg01_objectstore");
const { LoggerFactory } = require("uu_appg01_core-logging");

class Migration_1_2_Indexes {
  constructor() {
    this.logger = LoggerFactory.get("UuApp.AppWorkspace.MigrationIndexes");
    this.sysAppWorkspaceDao = DaoFactory.getDao("sysAppWorkspace");
    this.sysProfileDao = DaoFactory.getDao("sysProfile");
    this.sysAppWorkspaceConfigDao = DaoFactory.getDao("sysAppWorkspaceConfig");
    this.sysPermissionDao = DaoFactory.getDao("sysPermission");
  }

  async onStartup() {
    if (DaoFactory.isDataStoreOn()) {
      this.logger.debug("Migration started.");
      try {
        await this._migrate();
      } catch (e) {
        this.logger.error("Migration finished with error: ", e);
      }
    }
  }

  async _migrate() {
    let self = this;

    let promises = [
      self.updateSysAppWorkspace(),
      self.updateSysAppWorkspaceConfig(),
      self.updateSysPermission(),
      self.updateProfile()
    ];

    await Promise.all(promises);

    this.logger.debug("Migration finished without errors.");
  }

  async updateProfile() {
    let indexes = await this.sysProfileDao.getIndexes();
    if (
      indexes.itemList.find(element => {
        return element.name === "awid_1";
      })
    ) {
      await this.sysProfileDao.dropIndex("awid_1");
    }
    if (
      indexes.itemList.find(element => {
        return element.name === "awid_1_code_1" && element.unique !== true;
      })
    ) {
      await this.sysProfileDao.dropIndex("awid_1_code_1");
      await this.sysProfileDao.createIndex({ awid: 1, code: 1 }, { unique: true });
    }
  }

  async updateSysAppWorkspace() {
    let indexes = await this.sysAppWorkspaceDao.getIndexes();
    if (
      indexes.itemList.find(element => {
        return element.name === "artifactUri_1";
      })
    ) {
      await this.sysAppWorkspaceDao.dropIndex("artifactUri_1");
    }
  }

  async updateSysPermission() {
    let indexes = await this.sysPermissionDao.getIndexes();
    if (
      indexes.itemList.find(element => {
        return element.name === "awid_1_uuIdentity_1";
      })
    ) {
      await this.sysPermissionDao.dropIndex("awid_1_uuIdentity_1");
    }
  }

  async updateSysAppWorkspaceConfig() {
    let indexes = await this.sysAppWorkspaceConfigDao.getIndexes();
    if (
      indexes.itemList.find(element => {
        return element.name === "awid_1__id_1";
      })
    ) {
      await this.sysAppWorkspaceConfigDao.dropIndex("awid_1__id_1");
    }
  }
}

module.exports = Migration_1_2_Indexes;
