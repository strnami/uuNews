"use strict";

const { Validator } = require("uu_appg01_core-validation");
const { DaoFactory, ObjectStoreError } = require("uu_appg01_objectstore");
const { ValidationHelper } = require("uu_appg01_core-appserver");

const Path = require("path");

const SysAppWorkspaceModel = require("./sys-app-workspace-model.js");
const Errors = require("../errors/sys-permission-errors.js");
const WorkspaceErrors = require("../errors/sys-app-workspace-errors.js");

/**
 * represent sysPermission collection in the database
 * and store created permissions
 */
class SysPermissionModel {
  constructor() {
    this.PERMISSION_LIMIT = 1000;
    this.validator = Validator.load();
    this.dao = DaoFactory.getDao("sysPermission");
  }

  /**
   * create empty collection with indexes
   * @returns {Promise<void>}
   */
  async createSchema() {
    await this.dao.createSchema();
  }

  /**
   * create new permission and store it in the database
   * @param {String} awid
   * @param {Object} dtoIn
   * @param {Object} uuAppErrorMap
   * @returns {Promise<{}>}
   */
  async create(awid, dtoIn, uuAppErrorMap = {}) {
    //HDS1 A1, A2
    let validationResult = this.validator.validate("createPermissionDtoInType", dtoIn);
    uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      `${Errors.SysCreatePermission.UC_CODE}unsupportedKeys`,
      Errors.SysCreatePermission.InvalidDtoInError
    );

    let profileCode = dtoIn["profileCode"];

    //HDS2 A3
    let profiles;
    try {
      profiles = await SysAppWorkspaceModel.getAppWorkspaceProfiles(awid);
    } catch (e) {
      if (e instanceof WorkspaceErrors.SysGetAppWorkspace.SysAppWorkspaceDoesNotExistError) {
        throw new Errors.SysCreatePermission.SysAppWorkspaceDoesNotExistError();
      }
      throw e;
    }

    //A4
    if (!profiles || !profiles.includes(profileCode)) {
      throw new Errors.SysCreatePermission.SysProfileNotExistError({ uuAppErrorMap }, { profileList: profiles });
    }

    let totalNum;

    //HDS3
    try {
      totalNum = await this.getCount(awid);
    } catch (e) {
      //A5
      if (e instanceof ObjectStoreError) {
        throw new Errors.SysCreatePermission.SysPermissionDaoGetCountFailedError({ uuAppErrorMap }, e);
      }
      throw e;
    }

    //A6
    if (totalNum === this.PERMISSION_LIMIT) {
      throw new Errors.SysCreatePermission.MaxNumberOfInstancesReached(
        { uuAppErrorMap },
        { maxNoi: this.PERMISSION_LIMIT }
      );
    }

    //A7
    let existingPermissions;
    try {
      existingPermissions = await this.dao.list(awid, { profileCodeList: [dtoIn["profileCode"]] });
    } catch (e) {
      if (e instanceof ObjectStoreError) {
        throw new Errors.SysCreatePermission.SysPermissionDaoListByUuIdentityAndProfileFailed({ uuAppErrorMap }, e);
      }
      throw e;
    }

    let uuObjects = [];
    if (typeof dtoIn["uuIdentityList"] === "string") {
      dtoIn["uuIdentityList"] = [dtoIn["uuIdentityList"]];
    }

    let timeNow = new Date();

    if (dtoIn["ttl"]) {
      timeNow = new Date(timeNow.getTime() + dtoIn["ttl"] * 1000);
    }

    //HDS4, HDS5
    dtoIn["uuIdentityList"].forEach(function(uuId) {
      let permission = existingPermissions["itemList"].find(function(permission) {
        return permission["uuIdentity"] === uuId;
      });

      if (permission) {
        return;
      }

      let uuObject = {
        awid: awid,
        uuIdentity: uuId,
        profileCode: dtoIn["profileCode"]
      };

      if (dtoIn["ttl"]) {
        uuObject["expireAt"] = timeNow;
      }

      uuObjects.push(uuObject);
    });

    let newPermissionsCount = uuObjects.length;

    //HDS6 A8
    if (newPermissionsCount + totalNum > this.PERMISSION_LIMIT) {
      throw new Errors.SysCreatePermission.MaxNumberOfInstancesWillBeExceeded(
        { uuAppErrorMap },
        { uuIdentityList: dtoIn["uuIdentityList"], actualNoi: totalNum }
      );
    }

    let dtoOut = {};
    if (uuObjects.length === 0) {
      dtoOut["itemList"] = [];
    } else {
      try {
        dtoOut["itemList"] = await this.dao.create(uuObjects);
      } catch (e) {
        //A9
        if (e instanceof ObjectStoreError) {
          throw new Errors.SysCreatePermission.SysPermissionDaoCreateFailedError({ uuAppErrorMap }, e);
        }
        throw e;
      }
    }

    //A10
    dtoOut["uuAppErrorMap"] = uuAppErrorMap;

    //HDS7
    return dtoOut;
  }

  /**
   * return list of all permissions in the database
   * @param {String} awid
   * @param {Object} dtoIn
   * @param {Object} uuAppErrorMap
   * @returns {Promise<*>}
   */
  async listPermissions(awid, dtoIn, uuAppErrorMap = {}) {
    //HDS1 A1,A2
    let validationResult = this.validator.validate("sysListPermissionsDtoInType", dtoIn);
    uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      `${Errors.SysListPermission.UC_CODE}unsupportedKeys`,
      Errors.SysListPermission.InvalidDtoInError
    );

    //HDS2
    let dtoOut = await this.dao.list(awid, dtoIn, dtoIn["pageInfo"]);

    dtoOut["uuAppErrorMap"] = validationResult.getValidationErrorMap();
    Object.assign(dtoOut["uuAppErrorMap"], uuAppErrorMap);

    //HDS3
    return dtoOut;
  }

  /**
   * return profile code of specific user
   * @param {String} awid
   * @param {String} uuId
   * @returns {Promise<*>}
   */
  async getProfileCodesForUser(awid, uuId) {
    return await this.dao.getProfilesByUuIdentity(awid, uuId);
  }

  /**
   * remove specific permission from database
   * @param {String} awid
   * @param {Object} dtoIn
   * @param {Object} uuAppErrorMap
   * @returns {Promise<{uuAppErrorMap: {}}>}
   */
  async delete(awid, dtoIn, uuAppErrorMap = {}) {
    //HDS1 A1,A2
    let validationResult = this.validator.validate("sysDeletePermissionDtoInType", dtoIn);
    uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      `${Errors.SysDeletePermission.UC_CODE}unsupportedKeys`,
      Errors.SysDeletePermission.InvalidDtoInError
    );

    //HDS2
    try {
      await this.dao.deleteByUuIdentityAndProfile(awid, dtoIn["uuIdentityList"], dtoIn["profileCode"]);
    } catch (e) {
      if (e instanceof ObjectStoreError) {
        throw new Errors.SysDeletePermission.SysPermissionDaoDeleteFailedError({ uuAppErrorMap }, null, e);
      }
      throw e;
    }

    Object.assign(uuAppErrorMap, validationResult.getValidationErrorMap());

    //HDS3
    return { uuAppErrorMap: uuAppErrorMap };
  }

  /**
   * return count of all permissions in the database
   * @param {String} awid
   * @returns {Promise<*>}
   */
  async getCount(awid) {
    return await this.dao.getCount(awid);
  }
}

module.exports = new SysPermissionModel();
