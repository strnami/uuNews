"use strict";
const { Validator } = require("uu_appg01_core-validation");
const { ValidationHelper } = require("uu_appg01_core-appserver");
const { DaoFactory } = require("uu_appg01_objectstore");
const { Config } = require("uu_appg01_core-utils");
const Path = require("path");

const SysDatastoreDao = require("../daos/sys-data-store-mongo.js");
const SysAppWorkspaceConfigModel = require("./sys-app-workspace-config-model");
const SysAppWorkspaceModel = require("./sys-app-workspace-model");
const SysAppRuntimeModeModel = require("./sys-app-runtime-mode-model");
const Errors = require("../errors/sys-data-store-errors.js");

class SysDataStoreModel {
  constructor() {
    this.validator = Validator.load();
  }

  async dropDataStore(dtoIn) {
    let runtimeMode = await SysAppRuntimeModeModel.getAppRuntimeMode(Config.get("asid"));
    let currentRuntimeMode = runtimeMode.mode;
    let isInPrivilegedMode = currentRuntimeMode === "privileged";
    let uuAppErrorMap = {};

    //HDS1 A1
    if (!isInPrivilegedMode) {
      throw new Errors.SysDropDataStore.AppNotInPrivilegedMode({ uuAppErrorMap }, { currentRuntimeMode });
    }

    //HDS2 A2, A3
    let validationResult = this.validator.validate("sysDropDataStoresDtoInType", dtoIn);
    uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      `${Errors.SysDropDataStore.UC_CODE}unsupportedKeys`,
      Errors.SysDropDataStore.InvalidDtoInError
    );

    if (dtoIn.recreateIndexes == undefined) dtoIn.recreateIndexes = true;

    //HDS3 A4
    if (!DaoFactory.isDataStoreOn()) {
      throw new Errors.SysDropDataStore.DataStoreDisabled({ uuAppErrorMap });
    }

    //HDS4
    let loadedDataStores = await this._loadDataStores(dtoIn.dataStoreNames, uuAppErrorMap);
    let dtoOut = { uuAppErrorMap, droppedDataStores: [] };

    // clear caches
    SysAppWorkspaceConfigModel.clearCache();
    SysAppWorkspaceModel.clearCache();
    SysAppRuntimeModeModel.clearCache();

    //HDS5
    let index = 0;
    for (let dataStore of loadedDataStores) {
      let connectionString = dataStore.connectionString;
      //HDS5.1
      let collections = await SysDatastoreDao.getListOfCollections(connectionString);
      dtoOut.droppedDataStores.push({ name: dataStore.name, collections: [] });
      //HDS5.2
      for (let collection of collections) {
        let collectionName = collection.name;
        await SysDatastoreDao.dropCollection(connectionString, collectionName);

        //HDS5.3
        dtoOut.droppedDataStores[index].collections.push(collectionName);

        //HDS6
        if (dtoIn.recreateIndexes) {
          try {
            let collectionDao = DaoFactory.getDao(collectionName);
            if (collectionDao.createSchema) {
              await collectionDao.createSchema();
            }
          } catch (e) {
            //collection is not registered in DaoFactory
          }
        }
      }
      index += 1;
    }

    //HDS7
    return dtoOut;
  }

  _loadDataStores(datastoreNames, uuAppErrorMap) {
    let invalidDataStoreNames = [];
    let loadedDataStores = [];
    let uuSubAppDataStoreMap = Config.get("uuSubAppDataStoreMap");

    //HDS4.1 A5
    if (datastoreNames) {
      datastoreNames.forEach(name => {
        let connectionString = uuSubAppDataStoreMap[name];
        if (connectionString) {
          loadedDataStores.push({ name, connectionString });
        } else {
          invalidDataStoreNames.push(name);
        }
      });
      if (invalidDataStoreNames.length !== 0) {
        throw new Errors.SysDropDataStore.DataStoreNotConfigured({ uuAppErrorMap }, { invalidDataStoreNames });
      }

      //HDS4.2
    } else {
      for (let name of Object.keys(uuSubAppDataStoreMap)) {
        let connectionString = uuSubAppDataStoreMap[name];
        loadedDataStores.push({ name, connectionString });
      }
    }

    return loadedDataStores;
  }
}

module.exports = new SysDataStoreModel();
