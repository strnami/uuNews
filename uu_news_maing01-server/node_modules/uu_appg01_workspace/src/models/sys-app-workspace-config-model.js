"use strict";

const { Validator } = require("uu_appg01_core-validation");
const { DaoFactory, ObjectStoreError } = require("uu_appg01_objectstore");
const Path = require("path");
const Lru = require("lru-cache");
const { ValidationHelper } = require("uu_appg01_core-appserver");

const Errors = require("../errors/sys-app-workspace-config-errors.js");

/**
 * represent sysAppWorkspaceConfig collection in the database
 * and store configuration of the workspace
 */
class SysAppWorkspaceConfigModel {
  constructor() {
    // Initialize cache with TTL 5 minutes
    this.configCache = new Lru({ maxAge: 1000 * 60 * 5 });
    this.validator = Validator.load();
    this.dao = DaoFactory.getDao("sysAppWorkspaceConfig");
  }

  /**
   * create collection with indexes
   * @returns {Promise<void>}
   */
  async createSchema() {
    await this.dao.createSchema();
  }

  /**
   * update configuration of workspace
   * @param {String} awid
   * @param {Object} dtoIn
   * @param {Object} uuAppErrorMap
   * @returns {Promise<*>}
   */
  async setConfiguration(awid, dtoIn, uuAppErrorMap = {}) {
    //HDS1
    let validationResult = this.validator.validate("sysSetAppWorkspaceConfigDtoInType", dtoIn);

    //A2
    if (!validationResult.isValid() && validationResult.invalidValues["shape.e003"]) {
      throw new Errors.SysSetAppWorkspaceConfig.MaxDtoInSizeExceeded({ uuAppErrorMap });
    }

    //A1
    uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      `${Errors.SysSetAppWorkspaceConfig.UC_CODE}unsupportedKeys`,
      Errors.SysSetAppWorkspaceConfig.InvalidDtoInError
    );

    delete dtoIn["id"];
    delete dtoIn["awid"];
    delete dtoIn["sys"];

    let uuObject = {};
    Object.assign(uuObject, dtoIn);
    uuObject["awid"] = awid;

    let config;

    //HDS2
    try {
      config = await this.dao.update(uuObject);
    } catch (e) {
      //A3
      if (e instanceof ObjectStoreError) {
        throw new Errors.SysSetAppWorkspaceConfig.DaoUpdateFailed({ uuAppErrorMap }, e);
      }
      throw e;
    }

    this.addToCache(config);

    config["uuAppErrorMap"] = uuAppErrorMap;
    Object.assign(config["uuAppErrorMap"], uuAppErrorMap);

    //HDS3
    return config;
  }

  /**
   * return current configuration of workspace
   * @param {String} awid
   * @param uuAppErrorMap
   * @returns {Promise<*>}
   */
  async getConfiguration(awid, uuAppErrorMap = {}) {
    //HDS1
    let config = this.configCache.get(awid);

    //A1 A2
    if (!config) {
      config = await this.dao.getByAwid(awid);
      if (!config) {
        throw new Errors.SysGetAppWorkspaceConfig.ConfigDoesNotExist();
      }
    }

    //HDS2
    if (config) {
      this.addToCache(config);
      let result = Object.assign({}, config);
      result["uuAppErrorMap"] = uuAppErrorMap;
      return result;
    } else {
      return { uuAppErrorMap: uuAppErrorMap };
    }
  }

  /**
   * store init configuration (called during initWorkspace)
   * @param {Object} parameters
   * @returns {Promise<*>}
   */
  async create(parameters) {
    let config = await this.dao.create(parameters);
    this.addToCache(config);
    return config;
  }

  /**
   * reset configuration except id, sys and awid
   * @param {String} awid
   * @param {Object} uuAppErrorMap
   * @returns {Promise<{uuAppErrorMap: {}}>}
   */
  async clearConfiguration(awid, uuAppErrorMap = {}) {
    //HDS1
    let config = await this.dao.getByAwid(awid);

    //A1
    if (!config) {
      throw new Errors.SysClearAppWorkspaceConfig.ConfigDoesNotExist();
    }

    //HDS2
    let toUnsetAttributes = {};
    for (let k in config) {
      if (k !== "sys" && k !== "_id" && k !== "id" && k !== "awid") {
        toUnsetAttributes[k] = 1;
      }
    }

    //HDS3
    try {
      config = await this.dao.clear(config.awid, toUnsetAttributes);
    } catch (e) {
      //A2
      if (e instanceof ObjectStoreError) {
        throw new Errors.SysClearAppWorkspaceConfig.DaoUpdateFailed({ uuAppErrorMap }, e);
      }
      throw e;
    }

    this.addToCache(config);

    //HDS4
    return { uuAppErrorMap: uuAppErrorMap };
  }

  /**
   * remove configuration
   * @param {String} awid
   * @returns {Promise<void>}
   */
  async remove(awid) {
    await this.dao.deleteByAwid(awid);
    this.clearCache();
  }

  /**
   * reset cache
   */
  clearCache() {
    this.configCache.reset();
  }

  /**
   * add configuration to the cache
   * @param {Object} config
   */
  addToCache(config) {
    this.configCache.set(config["awid"], config);
  }
}

module.exports = new SysAppWorkspaceConfigModel();
