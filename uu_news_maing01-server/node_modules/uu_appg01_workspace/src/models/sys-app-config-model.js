"use strict";

const Path = require("path");
const { Validator } = require("uu_appg01_core-validation");
const { LoggerFactory } = require("uu_appg01_core-logging");
const { DaoFactory, ObjectStoreError } = require("uu_appg01_objectstore");
const { ValidationHelper } = require("uu_appg01_core-appserver");

const Errors = require("../errors/sys-app-config-errors");
const OidcClientHelper = require("../helpers/oidc-client-helper");

/**
 * represent sysAppConfig collection in the database
 * and store configuration of the workspace
 */
class SysAppConfigModel {
  constructor() {
    this.validator = Validator.load();
    this.dao = DaoFactory.getDao("sysAppConfig");
    this.logger = LoggerFactory.get("uuapp.workspace.SysAppConfigModel");
  }

  /**
   * initialize system scchema of application server
   * @param asid
   * @param dtoIn
   * @returns {Promise<*>}
   */
  async initApp(asid, dtoIn) {
    // HDS 1.1, 1.2, A1
    let validationResult = this.validator.validate("sysInitAppDtoInType", dtoIn);
    let uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      `${Errors.SysInitApp.UC_CODE}unsupportedKeys`,
      Errors.SysInitApp.InvalidDtoInError
    );

    //HDS 1.3
    delete dtoIn["id"];
    delete dtoIn["asid"];
    delete dtoIn["sys"];

    //HDS 2, A2
    let checkIfAlreadyExist = await this.dao.getByAsid(asid);
    if (checkIfAlreadyExist) {
      throw new Errors.SysInitApp.AsidAlreadyInitializedError({ uuAppErrorMap }, { asid });
    }

    //HDS 3
    await this.dao.createSchema();

    //HDS 4, A3
    if (dtoIn.runtimeMode) {
      dtoIn.runtimeMode.from = new Date();
      if (dtoIn.runtimeMode.to) {
        dtoIn.runtimeMode.to = new Date(dtoIn.runtimeMode.to);
      }
    }
    dtoIn.asid = asid;

    if (!dtoIn.runtimeMode) {
      dtoIn.runtimeMode = { mode: "privileged", from: new Date(), to: null };
    }

    let dtoOut;
    try {
      dtoOut = await this.dao.create(dtoIn);
    } catch (e) {
      if (e instanceof ObjectStoreError) {
        throw new Errors.SysInitApp.SysAppConfigDaoCreateFailedError({ uuAppErrorMap }, e);
      }
      throw e;
    }

    //HDS 5
    await OidcClientHelper.initOidcClient(asid, uuAppErrorMap, this.logger);

    //HDS 6
    dtoOut.uuAppErrorMap = uuAppErrorMap;
    return dtoOut;
  }

  /**
   * Set application configuration
   * @param asid
   * @param dtoIn
   * @returns {Promise<*>}
   */
  async setAppConfig(asid, dtoIn) {
    //HDS 1.1, 1.2, A1
    let validationResult = this.validator.validate("sysSetAppConfigDtoInType", dtoIn);
    let uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      `${Errors.SysSetAppConfig.UC_CODE}unsupportedKeys`,
      Errors.SysSetAppConfig.InvalidDtoInError
    );

    //HDS 1.3
    delete dtoIn["id"];
    delete dtoIn["asid"];
    delete dtoIn["sys"];

    //HDS 2, A2
    let dtoOut;
    try {
      dtoIn.asid = asid;
      if (dtoIn.runtimeMode) {
        dtoIn.runtimeMode.from = new Date().toISOString();
      }
      dtoOut = await this.dao.update(dtoIn);
    } catch (e) {
      if (e instanceof ObjectStoreError) {
        throw new Errors.SysSetAppConfig.SysAppConfigDaoUpdateFailedError({ uuAppErrorMap }, null, e);
      }
      throw e;
    }

    //HDS 3
    dtoOut.uuAppErrorMap = uuAppErrorMap;
    return dtoOut;
  }

  /**
   * Return application configuration
   * @param asid
   * @returns {Promise<*>}
   */
  async getAppConfig(asid) {
    //HDS 1
    let dtoOut = await this.dao.getByAsid(asid);
    if (!dtoOut) {
      throw new Errors.SysGetAppConfig.SysAppConfigDoesNotExistError(null, { asid });
    }

    //HDS 2
    return dtoOut;
  }
}

module.exports = new SysAppConfigModel();
