"use strict";

const {Validator} = require("uu_appg01_core-validation");
const {DaoFactory, ObjectStoreError} = require("uu_appg01_objectstore");
const {ValidationHelper} = require("uu_appg01_core-appserver");
const {BaseError, Config} = require("uu_appg01_core-utils");
const Path = require("path");

const ProfileConfig = require("../helpers/profile-config.js");
const SysAppRuntimeModeModel = require("./sys-app-runtime-mode-model");
const SysAppWorkspaceModel = require("./sys-app-workspace-model.js");
const UuOs8UriHelper = require("../helpers/uu-os8-uri-helper");
const Errors = require("../errors/sys-profiles-errors.js");

const WARNINGS = {
  sysAppWorkspaceProfilesUpToDate: {
    code: `${Errors.SysUpdateProfiles.UC_CODE}sysAppWorkspaceProfilesUpToDate`,
    message: "Profiles of the sysAppWorkspace are up to date."
  }
};

/**
 * represent sysProfile collection in the database
 * and store profiles
 */
class SysProfileModel {

  constructor() {
    this.GLOBAL_GROUPS = ["urn:uu:GGALL", "urn:uu:GGPLUS4U"];
    this.RESERVED_PROFILES = ["AwidOwner", "Public"];

    this.validator = Validator.load();
    this.dao = DaoFactory.getDao("sysProfile");
  }

  /**
   * create empty collection with indexes
   * @returns {Promise<void>}
   */
  async createSchema() {
    await this.dao.createSchema();
  }

  /**
   * store profiles to database
   * called during initWorkspace for storing profiles from profiles.json
   * @param {String} awid
   * @param {Array} profilesCodes
   * @returns {Promise<void>}
   */
  async initProfiles(awid, profilesCodes) {
    let self = this;
    if (profilesCodes) {
      for (let i = 0; i < profilesCodes.length; i += 1) {
        let profileCode = profilesCodes[i];

        let checkObject = await self.getProfileByCode(awid, profileCode);

        if (checkObject || self.RESERVED_PROFILES.includes(profileCode)) {
          continue;
        }
        let profile = {};
        profile["awid"] = awid;
        profile["code"] = profileCode;
        profile["roleUri"] = null;
        await self.dao.create(profile);

      }
    }
  }

  /**
   * Creates new SysProfile for specific SysAppWorkspace.
   * TODO method is for internal usage, need revision and re-impl.
   *
   * @param {String} awid
   * @param {String} tid
   * @param {Object} session
   * @param {Object} profile
   * @returns {Promise<void>}
   */
  async create(awid, tid, session, profile) {

    let self = this;
    profile["awid"] = awid; //TODO ?

    if (this.RESERVED_PROFILES.includes(profile)) {
      return;
    } else {
      let appWorkspace = await SysAppWorkspaceModel.getAppWorkspace(awid);
      let cfgProfileList = await ProfileConfig.getProfiles();

      if (!cfgProfileList.includes(profile["code"])) {
        throw new BaseError(profile["code"]);
      }

      let storedProfile = await this.getProfileByCode(awid, profile["code"]);

      if (storedProfile) {
        await self.dao.update(storedProfile);
      } else {
        if (!appWorkspace["profileList"]) {
          appWorkspace["profileList"] = [];
        }
        appWorkspace["profileList"].push(profile);
        await self.dao.create(profile);
      }
      appWorkspace["awid"] = awid;

      await SysAppWorkspaceModel.dao.update(appWorkspace);
      SysAppWorkspaceModel.addToCache(appWorkspace);
    }
  }

  /**
   * return list of all profiles in the database
   * @param {String} awid
   * @param {Object} dtoIn
   * @param {Object} uuAppErrorMap
   * @returns {Promise<{}>}
   */
  async listProfiles(awid, dtoIn, uuAppErrorMap = {}) {

    //HDS1 A1,A2
    let validationResult = this.validator.validate("sysListProfilesDtoInType", dtoIn);
    uuAppErrorMap = ValidationHelper.processValidationResult(dtoIn, validationResult,
      `${Errors.SysListProfiles.UC_CODE}unsupportedKeys`, Errors.SysListProfiles.InvalidDtoInError);

    let dtoOut = {};

    //HDS2
    try {
      dtoOut = await this.dao.listByCode(awid, dtoIn.codeList, dtoIn["pageInfo"]);
    } catch (e) {
      if (e instanceof ObjectStoreError) {
        throw new Errors.SysListProfiles.DaoListByUuIdAndProfileError({ uuAppErrorMap }, e);
      }
      throw e;
    }
    dtoOut["uuAppErrorMap"] = uuAppErrorMap;

    //HDS3
    return dtoOut;
  }

  /**
   * return spoecific profile by code
   * @param {String} awid
   * @param {Object} dtoIn
   * @param {Object} uuAppErrorMap
   * @returns {Promise<*>}
   */
  async getProfile(awid, dtoIn, uuAppErrorMap = {}) {
    //HDS1 A1, A2
    let validationResult = this.validator.validate("getProfileDtoInType", dtoIn);
    uuAppErrorMap = ValidationHelper.processValidationResult(dtoIn, validationResult,
      `${Errors.SysGetProfile.UC_CODE}unsupportedKeys`, Errors.SysGetProfile.InvalidDtoInError);

    //HDS2
    let profile = await this.getProfileByCode(awid, dtoIn["code"]);

    //HDS3
    if (profile) {
      profile["uuAppErrorMap"] = uuAppErrorMap;
      return profile;
    } else {
      return { uuAppErrorMap };
    }
  }

  /**
   * update specific profile by code
   * @param {String} awid
   * @param {Object} dtoIn
   * @param {Object} uuAppErrorMap
   * @returns {Promise<*>}
   */
  async setProfile(awid, dtoIn, uuAppErrorMap = {}) {

    //HDS1 A1, A2
    let validationResult = this.validator.validate("sysSetProfileDtoInType", dtoIn);
    uuAppErrorMap = ValidationHelper.processValidationResult(dtoIn, validationResult,
      `${Errors.SysSetProfile.UC_CODE}unsupportedKeys`, Errors.SysSetProfile.InvalidDtoInError);

    dtoIn["awid"] = awid;
    let roleUri = dtoIn["roleUri"];
    let isGlobalGroup = this.isGlobalGroup(roleUri);

    if (isGlobalGroup) {
      dtoIn["roleUri"] = roleUri;
    } else {
      if (UuOs8UriHelper.isNullUri(dtoIn["roleUri"])) {
        dtoIn["roleUri"] = null;
      } else {
        dtoIn["roleUri"] = roleUri;
      }
    }

    let dtoOut;

    //HDS2
    try {
      dtoOut = await this.dao.update(dtoIn);
    } catch (e) {

      //A3
      if (e instanceof ObjectStoreError) {
        throw new Errors.SysSetProfile.DaoUpdateByCodeFailedError({ uuAppErrorMap }, e);
      }
      throw e;
    }

    dtoOut["uuAppErrorMap"] = uuAppErrorMap;

    //HDS3
    return dtoOut;
  }

  /**
   * update profiles from awidList
   * @param {Object} dtoIn
   */
  async updateProfiles(dtoIn) {
    let runtimeMode = await SysAppRuntimeModeModel.getAppRuntimeMode(Config.get("asid"));
    let currentRuntimeMode = runtimeMode.mode;
    let isInPrivilegedMode = (runtimeMode.mode === "privileged");
    let uuAppErrorMap = {};

    //HDS1 A1
    if (!isInPrivilegedMode) {
      throw new Errors.SysUpdateProfiles.AppNotInPrivilegedModeError({ uuAppErrorMap }, { currentRuntimeMode });
    }

    //HDS2 A2, A3
    let validationResult = this.validator.validate("sysUpdateProfilesDtoInType", dtoIn);
    uuAppErrorMap = ValidationHelper.processValidationResult(dtoIn, validationResult,
      `${Errors.SysUpdateProfiles.UC_CODE}unsupportedKeys`, Errors.SysUpdateProfiles.InvalidDtoInError);

    //HDS3
    let awidList;
    let loadedAppWorkspaces;
    if (dtoIn.awidList) {
      awidList = dtoIn.awidList;
      //HDS3.1 A4
      loadedAppWorkspaces = await this._checkAndLoadInitializedAppWorkspacesByAwids(awidList, uuAppErrorMap);
    } else {
      //HDS3.2
      loadedAppWorkspaces = await this._loadAllInitializedAppWorkspaces();
    }

    //HDS4
    let currentProfileList = ProfileConfig.profileList.sort();
    let updatedAwids = [];
    //HDS5
    for (const uuAppWorkspace of loadedAppWorkspaces) {
      let awid = uuAppWorkspace.awid;
      let workspaceProfileList = uuAppWorkspace.profileList.sort();
      //HDS5.1
      if (JSON.stringify(workspaceProfileList) !== JSON.stringify(currentProfileList)) {
        await this._migrateAwid(uuAppWorkspace, currentProfileList, uuAppErrorMap);
        updatedAwids.push(awid);
      } else {
        //A5
        if (!uuAppErrorMap[WARNINGS.sysAppWorkspaceProfilesUpToDate.code]) {
          ValidationHelper.addWarning(
            uuAppErrorMap,
            WARNINGS.sysAppWorkspaceProfilesUpToDate.code,
            WARNINGS.sysAppWorkspaceProfilesUpToDate.message,
            { awidList: [awid] }
          );
        } else {
          uuAppErrorMap[WARNINGS.sysAppWorkspaceProfilesUpToDate.code].paramMap.awidList.push(awid);
        }
      }
    }

    //HDS6
    SysAppWorkspaceModel.clearCache();

    //HDS7
    return {
      uuAppErrorMap,
      updatedAwidList: updatedAwids
    };
  }

  async _loadAllInitializedAppWorkspaces() {
    let appWorkspaces = [];
    let pageIndex = 0;
    let loadedWorkspaces;

    do {
      loadedWorkspaces = await SysAppWorkspaceModel.dao.listByState("initialized", { pageIndex });
      appWorkspaces = appWorkspaces.concat(loadedWorkspaces.itemList);// loadedWorkspaces.itemList.map((item) => item.awid);
      pageIndex += 1;
    } while (loadedWorkspaces && appWorkspaces.length < loadedWorkspaces.pageInfo.total);

    return appWorkspaces;
  }

  async _checkAndLoadInitializedAppWorkspacesByAwids(awidsToCheck, uuAppErrorMap) {
    let loadedWorkspaces = await SysAppWorkspaceModel.dao.listByStateAndAwidList("initialized", awidsToCheck);
    awidsToCheck.forEach((awid) => {
      if (loadedWorkspaces.itemList.findIndex(ws => ws.awid === awid) == -1) {
        throw new Errors.SysUpdateProfiles.SysAppWorkspaceDoesNotExistError({ uuAppErrorMap }, { awid });
      }
    });

    return loadedWorkspaces.itemList;
  }

  async _migrateAwid(workspace, currentProfileList, uuAppErrorMap) {
    let awid = workspace.awid;
    //HDS 5.2 A6
    workspace.profileList = currentProfileList;
    try {
      await SysAppWorkspaceModel.dao.update(workspace);
    } catch (e) {
      throw new Errors.SysUpdateProfiles.sysAppWorkspaceDaoUpdateFailed({ uuAppErrorMap }, e);
    }

    //HDS5.3
    let loadedProfiles = await this.dao.listByCode(workspace.awid);
    loadedProfiles = loadedProfiles.itemList.map((item) => item.code);
    //HDS5.4
    let { profilesToAdd, profilesToDelete } = this._diffProfiles(loadedProfiles, currentProfileList);

    //HDS5.5 A7
    for (const code of profilesToAdd) {
      try {
        await this.dao.create({ awid, code, roleUri: null });
      } catch (e) {
        throw new Errors.SysUpdateProfiles.SysProfileDaoCreateFailedError({ uuAppErrorMap }, e);
      }
    }

    //HDS5.6 A8
    for (const code of profilesToDelete) {
      try {
        await this.dao.deleteByCode(awid, code);
      } catch (e) {
        throw new Errors.SysUpdateProfiles.SysProfileDaoDeleteByCodeFailedError({ uuAppErrorMap }, e);
      }
    }

  }

  _diffProfiles(loadedProfiles, currentProfiles) {
    return {
      profilesToDelete: loadedProfiles.filter((item) => !currentProfiles.includes(item) && !this.RESERVED_PROFILES.includes(item)),
      profilesToAdd: currentProfiles.filter((item) => !loadedProfiles.includes(item) && !this.RESERVED_PROFILES.includes(item))
    };
  }

  /**
   * return specific profile by code
   * @param {String} awid
   * @param {Array} code
   * @returns {Promise<*>}
   */
  async getProfileByCode(awid, code) {
    return await this.dao.getByCode(awid, code);
  }

  /**
   * return all profiles by code
   * @param {String} awid
   * @param {Array} codes
   * @returns {Promise<*>}
   */
  async getProfiles(awid, codes = null) {
    return await this.dao.getByCodes(awid, codes);
  }

  /**
   * delete all profiles
   * @param {String} awid
   * @returns {Promise<*>}
   */
  async deleteAllProfiles(awid) {
    return this.dao.deleteByAwid(awid);
  }

  /**
   * check if uri is global (["urn:uu:GGALL", "urn:uu:GGPLUS4U"])
   * @param {String} roleUri
   * @returns {boolean}
   */
  isGlobalGroup(roleUri) {
    return this.GLOBAL_GROUPS.includes(roleUri);
  }

}

module.exports = new SysProfileModel();
