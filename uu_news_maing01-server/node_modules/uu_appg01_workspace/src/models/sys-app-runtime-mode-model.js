"use strict";

const Path = require("path");
const Lru = require("lru-cache");
const { Validator } = require("uu_appg01_core-validation");
const { DaoFactory, ObjectStoreError, ObjectNotFound } = require("uu_appg01_objectstore");
const { ValidationHelper } = require("uu_appg01_core-appserver");

const Errors = require("../errors/sys-app-runtime-mode-errors.js");

const DEFAULT_RUNTIME_MODE_CODE = "privileged";
const RUNTIME_MODE_CACHE_KEY = "RM";

/**
 * represent sysAppConfig collection in the database
 * and store configuration of the workspace
 */
class SysAppRuntimeModeModel {
  constructor() {
    this.validator = Validator.load();
    this.dao = DaoFactory.getDao("sysAppConfig");

    // Initialize cache with TTL 5 minutes
    this.runtimeModeCache = new Lru({ maxAge: 1000 * 60 * 5 });
  }

  /**
   * Sets current runtime mode
   * @param asid
   * @param dtoIn
   * @return {Promise<{uuAppErrorMap: {}}>}
   */
  async setAppRuntimeMode(asid, dtoIn) {
    // HDS 1.1, 1.2, 1.3, A1, A2
    let validationResult = this.validator.validate("sysSetAppRuntimeModeDtoInType", dtoIn);
    let uuAppErrorMap = ValidationHelper.processValidationResult(
      dtoIn,
      validationResult,
      `${Errors.SysSetAppRuntimeMode.UC_CODE}unsupportedKeys`,
      Errors.SysSetAppRuntimeMode.InvalidDtoInError
    );

    // HDS 1.4
    dtoIn.to = dtoIn.to ? new Date(dtoIn.to) : null;
    dtoIn.from = new Date();
    let uuObject = { asid, runtimeMode: dtoIn };

    // HDS 2
    try {
      await this.dao.update(uuObject);
    } catch (e) {
      if (e instanceof ObjectNotFound) {
        throw new Errors.SysSetAppRuntimeMode.AppNotInitialized({ uuAppErrorMap }, { asid });
      } else if (e instanceof ObjectStoreError) {
        throw new Errors.SysSetAppRuntimeMode.SysAppConfigDaoUpdateFailedError({ uuAppErrorMap }, { asid }, e);
      }
      throw e;
    }

    // HDS 3
    this.clearCache();

    //HDS 4
    let dtoOut = { uuAppErrorMap };
    return dtoOut;
  }

  /**
   * Return current runtime mode
   * @param asid
   * @returns {Promise<*>}
   */
  async getAppRuntimeMode(asid) {
    // HDS 1
    let dtoOut;
    if (!this.runtimeModeCache.has(RUNTIME_MODE_CACHE_KEY)) {
      // A1
      dtoOut = await this.dao.getByAsid(asid);

      // A2
      if (!dtoOut || !dtoOut.runtimeMode) {
        dtoOut = this._getDefault();
      } else {
        dtoOut = dtoOut.runtimeMode;
        this.runtimeModeCache.set(RUNTIME_MODE_CACHE_KEY, dtoOut);
      }
    } else {
      dtoOut = this.runtimeModeCache.get(RUNTIME_MODE_CACHE_KEY);
    }

    // HDS 2
    dtoOut.uuAppErrorMap = {};
    return dtoOut;
  }

  _getDefault() {
    return {
      mode: DEFAULT_RUNTIME_MODE_CODE
    };
  }

  clearCache() {
    this.runtimeModeCache.reset();
  }
}

module.exports = new SysAppRuntimeModeModel();
