"use strict";

const {Config, Mutex} = require("uu_appg01_core-utils");
const {MongoMemoryServer} = require("mongodb-memory-server-core");
const {MongoClient} = require("mongodb");
const Fs = require("fs");
const Path = require("path");
const Os = require("os");

const DEFAULT_DB = "test";
const DEFAULT_VERSION = "3.4.13";
const MONGO_BIN_PATH = Path.resolve(Os.homedir(), ".cache", "mongodb-binaries");

class TestMongo {

  constructor(options = {}) {
    this._dbName = options.db || DEFAULT_DB;
    this._clients = {};
    this._connectionString = null;
    let config = {
      dbName: this._dbName,
      debug: options.verbose
    };
    if (options.port) {
      config.port = options.port;
    }
    if (options.dbPath) {
      config.dbPath = options.dbPath;
    }
    if (options.storageEngine) {
      config.storageEngine = options.storageEngine;
    }
    let replSet = options.replSet || Config.get("embeddedMongoReplSet");
    if (replSet) {
      if (typeof replSet === "boolean" || typeof replSet === "number") {
        this._replSet = `rs${Date.now()}`;
      } else {
        this._replSet = replSet;
      }
      config.replSet = this._replSet;
    }
    this._mongod = new MongoMemoryServer({
      instance: config,
      binary: {
        version: options.version || Config.getString("embeddedMongoDbVersion") || DEFAULT_VERSION,
        downloadDir: MONGO_BIN_PATH
      },
      debug: options.verbose
    });
  }

  isRunning() {
    return !!this._mongod.getInstanceInfo();
  }

  getPort() {
    if (!this.isRunning()) {
      throw new Error("Test database is not running.");
    }
    return this._mongod.getInstanceInfo().port;
  }

  getDbPath() {
    if (!this.isRunning()) {
      throw new Error("Test database is not running.");
    }
    return this._mongod.getInstanceInfo().dbPath;
  }

  getConnectionString(db = null) {
    if (!this.isRunning()) {
      throw new Error("Test database is not running.");
    } else if (db) {
      return this._connectionString.replace(/[^\/]*$/, db);
    } else {
      return this._connectionString;
    }
  }

  async start() {
    this._connectionString = await this._mongod.getConnectionString();
    if (this._replSet) {
      let client = await this._getClient("admin");
      let result = await client.db().command({ replSetInitiate : {
          _id: this._replSet,
          members: [{
            _id: 0,
            host: `127.0.0.1:${await this._mongod.getPort()}`
          }]
        }
      });
      let waited = 0;
      while (!(await client.db().command( { isMaster: 1 } )).ismaster) {
        if (waited >= 10000) {
          throw new Error("Replica set was not initiated in 10s.");
        }
        waited += await Mutex.sleep(100);
      }
    }
    return this._connectionString;
  }

  async stop() {
    let results = [];
    let clients = this._clients;
    Object.keys(this._clients).map(function (db) {
      let client = clients[db];
      results.push(client.close());
    });
    await Promise.all(results);
    await this._mongod.stop();
    this._clients = {};
    this._connectionString = null;
  }

  async clear(db = null) {
    let client = await this._getClient(db || this._dbName);
    await client.db().dropDatabase();
  }

  async execute(script, db = null) {
    let client = await this._getClient(db || this._dbName);
    let result = await client.db().eval(script);
    return result;
  }

  async executeFile(file, db = null) {
    let script = Fs.readFileSync(file, "utf8");
    return await this.execute(script, db);
  }

  async _getClient(db) {
    let connectionString = this.getConnectionString(db);
    let client = this._clients[db];
    if (!client) {
      client = await MongoClient.connect(connectionString);
      this._clients[db] = client;
    }
    return client;
  }

}

module.exports = TestMongo;
